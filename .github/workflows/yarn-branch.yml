name: Node Collector Webclient - Branch Test
run-name: ${{ github.actor }} is Collecting Nodi-nessðŸš€
on:
  push:
    branches-ignore:
      - main
  workflow_dispatch:

jobs:
  Setup:
    runs-on: ubuntu-24.04
    outputs:
      Date: ${{ steps.date.outputs.date }}
      v18:  ${{ steps.v.outputs.v18 }}
      v20:  ${{ steps.v.outputs.v20 }}
      v22:  ${{ steps.v.outputs.v22 }}
    steps:
      - name: Get current date
        id: DATE
        run: |
          echo "Getting Date"
          echo "DATE=$(date '+%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
          echo -e "\nFile:\n$GITHUB_OUTPUT"
          echo "Values:"
          cat $GITHUB_OUTPUT

      - name: Get current node versions
        id: v
        run: |
          echo -e "Getting versions"

          # Fetch the Node.js version data
          node_versions=$(curl -s https://nodejs.org/dist/index.json)
          
          # Function to get the latest version for a specific major version
          get_version() { 
            major_version=$1 
            echo $node_versions |\
              jq -r --arg major_version "v$major_version" \
                '[.[] | select(.version | startswith($major_version))][0].version'
          }

          # Fetch the latest versions for v18, v20, and v22
          v18=$(get_version 18)
          v20=$(get_version 20)
          v22=$(get_version 22)

          echo "The latest Node.js v18 version is: $v18"
          echo "The latest Node.js v20 version is: $v20"
          echo "The latest Node.js v22 version is: $v22"

          echo "v18=${v18}" >> $GITHUB_OUTPUT
          echo "v20=${v20}" >> $GITHUB_OUTPUT
          echo "v22=${v22}" >> $GITHUB_OUTPUT

          echo -e "\nFile:\n$GITHUB_OUTPUT"
          echo "Values:"
          cat $GITHUB_OUTPUT

  Collect:
    runs-on: ubuntu-24.04
    needs: [Setup]

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ needs.Setup.outputs.v18 }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.Setup.outputs.v18 }}

      - name: Enable Corepack
        run: |
          echo -e "\nEnabling Corepack for Yarn"
          sudo corepack enable
          echo "Node Version: $(node -v)"
          echo "Yarn version: $(yarn -v)"

      - name: Set up git
        run: |
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"

      - name: Run yarn with verdaccio
        run: |
          export XDG_DATA_HOME=$PWD

          echo -e "\nRunning Verdaccio"
          yarn dlx verdaccio >\
            verdaccio/verdaccio.log 2>\
            verdaccio/verdaccio-err.log &
          tail -f verdaccio/verdaccio.log & P=$! && sleep 30 && kill -9 $P
          echo -e "\nTailing errors\n" &&\
          tail verdaccio/verdaccio-err.log

          echo -e "\nSetting up registries"
          npm set registry http://localhost:4873/
          yarn config set npmRegistryServer http://localhost:4873/

          echo -e "\nChecking Connectivity\n"
          curl http://localhost:4873 -o test.html
          sleep 1
          echo -e "\nRunning Yarn"
          yarn install

      - name: Listings
        run: |
          echo -e "\nListing verdaccio/*"
          ls -Alht verdaccio/*
          echo -e "\nListing Consumption"
          du -chd0 .yarn node_modules verdaccio/*

      - name: TARchive verdaccio storage directory
        run: |
          ls -Alht verdaccio/*
          tar -cvzf verdaccio-${{ needs.Setup.outputs.Date }}.tgz \
            verdaccio \
            | tee verdaccio-${{ needs.Setup.outputs.Date }}.tgz.txt

      - name: TARchive node_modules directory
        run: |
          ls -lAhS ${{ github.workspace }}
          tar -cvzf node-modules-${{ needs.Setup.outputs.Date }}.tgz \
            node_modules yarn.lock \
            | tee node-modules-${{ needs.Setup.outputs.Date }}.tgz.txt

      - name: TARchive yarn cache directory
        run: |
          ls -lAhS ${{ github.workspace }}
          tar -cvzf yarn-cache-${{ needs.Setup.outputs.Date }}.tgz \
            .yarn yarn.lock \
            | tee yarn-cache-${{ needs.Setup.outputs.Date }}.tgz.txt

      - name: Upload verdaccio artifact
        uses: actions/upload-artifact@v4
        with:
          name: verdaccio-${{ needs.Setup.outputs.Date }}.tgz
          path: verdaccio-${{ needs.Setup.outputs.Date }}.tgz
          if-no-files-found: error

      - name: Upload verdaccio ToC artifact
        uses: actions/upload-artifact@v4
        with:
          name: verdaccio-${{ needs.Setup.outputs.Date }}.tgz.txt
          path: verdaccio-${{ needs.Setup.outputs.Date }}.tgz.txt
          if-no-files-found: error

      - name: Upload cache artifact
        uses: actions/upload-artifact@v4
        with:
          name: yarn-cache-${{ needs.Setup.outputs.Date }}.tgz
          path: yarn-cache-${{ needs.Setup.outputs.Date }}.tgz
          if-no-files-found: error

      - name: Upload cache ToC artifact
        uses: actions/upload-artifact@v4
        with:
          name: yarn-cache-${{ needs.Setup.outputs.Date }}.tgz.txt
          path: yarn-cache-${{ needs.Setup.outputs.Date }}.tgz.txt
          if-no-files-found: error

      - name: Upload modules artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-modules-${{ needs.Setup.outputs.Date }}.tgz
          path: node-modules-${{ needs.Setup.outputs.Date }}.tgz
          if-no-files-found: error

      - name: Upload modules ToC artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-modules-${{ needs.Setup.outputs.Date }}.tgz.txt
          path: node-modules-${{ needs.Setup.outputs.Date }}.tgz.txt
          if-no-files-found: error

      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: Logs-${{ needs.Setup.outputs.Date }}.log
          path: "verdaccio/*.log"

  MakeISO:
    runs-on: ubuntu-24.04
    needs: [Setup, Collect]
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Install mkisofs
        run: |
          sudo apt-get update -y
          sudo apt-get install -y mkisofs isomd5sum wget

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ISO

      - name: Download Node Installers
        run: |
          echo -e "\nDownloading installers\n"
          mkdir -p ISO/runtimes
          cd ISO/runtimes
          wget -nv https://nodejs.org/dist/latest-v18.x/node-${{ needs.Setup.outputs.v18 }}-x64.msi
          wget -nv https://nodejs.org/dist/latest-v20.x/node-${{ needs.Setup.outputs.v20 }}-x64.msi
          wget -nv https://nodejs.org/dist/latest-v22.x/node-${{ needs.Setup.outputs.v22 }}-x64.msi
          wget -nv https://nodejs.org/dist/latest-v18.x/node-${{ needs.Setup.outputs.v18 }}-win-x64.zip
          wget -nv https://nodejs.org/dist/latest-v20.x/node-${{ needs.Setup.outputs.v20 }}-win-x64.zip
          wget -nv https://nodejs.org/dist/latest-v22.x/node-${{ needs.Setup.outputs.v22 }}-win-x64.zip
          wget -nv https://nodejs.org/dist/latest-v18.x/node-${{ needs.Setup.outputs.v18 }}-linux-x64.tar.xz
          wget -nv https://nodejs.org/dist/latest-v20.x/node-${{ needs.Setup.outputs.v20 }}-linux-x64.tar.xz
          wget -nv https://nodejs.org/dist/latest-v22.x/node-${{ needs.Setup.outputs.v22 }}-linux-x64.tar.xz
          sha256sum -b * | tee node_runtimes.sha

      - name: Copy Markdowns to ISO
        run: cp -v *.md ISO/

      - name: Show Artifacts
        run: ls -Alh ISO/*tgz*

      - name: ISO Table of contents
        run: |
          tree -a ISO/ \
            | tee ISO/${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso.txt

      - name: Upload iso ToC artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso.txt
          path: ISO/${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso.txt
          if-no-files-found: error

      - name: Make ISO
        run: |
          mkisofs -J -R -v -T -l \
            -V '${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}' \
            -A '${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}' \
            -o ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso \
            ISO

      - name: Implant MD5 sum into iso
        run: implantisomd5 ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso

      - name: Generate Hash
        run: |
          sha256sum -b ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso | tee \
            ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso.sha

      - name: Show ISO & Hash
        run: ls -Alh *.iso*

      - name: Upload iso artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso
          path: ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso
          if-no-files-found: error

      - name: Upload iso sha artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso.sha
          path: ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso.sha
          if-no-files-found: error

  OfflineTest:
    runs-on: ubuntu-24.04
    needs: [Setup, MakeISO]
    permissions:
      contents: write
      pull-requests: read
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    steps:
      - name: Install isomd5sum
        run: |
          sudo apt-get update -y
          sudo apt-get install -y isomd5sum

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download ISO and hash
        uses: actions/download-artifact@v4
        with:
          pattern: "${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso*"
          merge-multiple: true

      - name: Validate Hashes
        run: |
          echo -e "List Artifacts"
          ls -Alht
          echo -e "\nCheck injected ISO MD5"
          checkisomd5 ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso
          echo -e "\nCheck ISO sha256"
          sha256sum -cw ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso.sha

      - name: Mount ISO
        run: sudo mount -v -o loop ${{ vars.COLLECTOR }}-${{ needs.Setup.outputs.Date }}.iso /mnt

      - name: UnTARchive Yarn Cache
        run: tar -xzvf /mnt/yarn-cache-${{ needs.Setup.outputs.Date }}.tgz

      - name: Run yarn install
        run: |
          echo -e "Setup Yarn"
          sudo corepack enable
          echo -e "Configure Yarn for inaccessable network"
          npm set registry http://localhost:4873/
          yarn config set npmRegistryServer http://localhost:4873/
          echo -e "\nRun yarn install --immutable\n"
          yarn install --immutable

      - name: Run yarn
        run: |
          echo -e "Run Yarn"
          yarn run

  Release:
    runs-on: ubuntu-24.04
    needs: [Setup, OfflineTest]
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Show Artifacts
        run: ls -lh *tgz* *iso*

  Sharepoint:
    runs-on: ubuntu-24.04
    needs: [Setup, OfflineTest]
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Show Artifacts
        run: ls -lh *tgz* *iso*
